<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>

    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
    <CompilerGeneratedFilesOutputPath>generated</CompilerGeneratedFilesOutputPath>
  </PropertyGroup>

  <ItemGroup>
     <OpenApiSchemaMvcServer Include="$(SolutionRoot)schemas\bad.yaml" Link="Bad\bad.yaml" PathPrefix="/bad" Namespace="DarkPatterns.OpenApiCodegen.Server.Mvc.TestApp.Bad.Bad" SchemaId="proj://darkpatterns-openapi/bad.yaml" /> 
    <OpenApiSchemaMvcServer Include="$(SolutionRoot)schemas\bad.2.yaml" Link="Bad\bad.2.yaml" PathPrefix="/bad2" Namespace="DarkPatterns.OpenApiCodegen.Server.Mvc.TestApp.Bad.Bad2" SchemaId="proj://darkpatterns-openapi/bad.2.yaml" />

    <Compile Remove="generated/**/*" />
    <Clean Include="generated/**/*" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference
      Include="$(SolutionRoot)generators\csharp\OpenApiCodegen.CSharp.Analyzers\OpenApiCodegen.CSharp.Roslyn4.1.csproj"
      OutputItemType="Analyzer"
      ReferenceOutputAssembly="false" />
    <ProjectReference Include="..\OpenApiCodegen.Json.Extensions\OpenApiCodegen.Json.Extensions.csproj" />
  </ItemGroup>

  <!-- The project reference won't include this due to the multi-version targeting trick -->
  <Import Project="$(SolutionRoot)generators\csharp\OpenApiCodegen.CSharp\OpenApiCodegen.CSharp.props" />

</Project>
